#!/usr/bin/env python3
"""
API ph√¢n lo·∫°i gi·ªõi t√≠nh t·ª´ ti·∫øng n√≥i ti·∫øng Vi·ªát
Vietnamese Gender Classification API
"""

import os
import pickle
import numpy as np
import librosa
from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from typing import Dict, Any
import uvicorn
from gender_classification import VietnameseGenderClassifier

# Kh·ªüi t·∫°o FastAPI app
app = FastAPI(
    title="Vietnamese Gender Classification API",
    description="API ph√¢n lo·∫°i gi·ªõi t√≠nh t·ª´ ti·∫øng n√≥i ti·∫øng Vi·ªát s·ª≠ d·ª•ng MFCC + F0",
    version="1.0.0"
)

# Bi·∫øn global ƒë·ªÉ l∆∞u m√¥ h√¨nh
models = {}
classifier = None

class PredictionResponse(BaseModel):
    """Response model cho d·ª± ƒëo√°n"""
    success: bool
    prediction: Dict[str, Any]
    error: str = None

def load_models():
    """T·∫£i c√°c m√¥ h√¨nh ƒë√£ l∆∞u"""
    global models, classifier
    
    try:
        models_dir = "models"
        
        # Ki·ªÉm tra xem c√≥ th∆∞ m·ª•c models kh√¥ng
        if not os.path.exists(models_dir):
            raise FileNotFoundError("Th∆∞ m·ª•c models kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ch·∫°y save_model.py tr∆∞·ªõc.")
        
        # T·∫£i SVM model
        with open(os.path.join(models_dir, "svm_model.pkl"), 'rb') as f:
            models['svm'] = pickle.load(f)
        
        # T·∫£i Random Forest model
        with open(os.path.join(models_dir, "random_forest_model.pkl"), 'rb') as f:
            models['rf'] = pickle.load(f)
        
        # T·∫£i scaler
        with open(os.path.join(models_dir, "scaler.pkl"), 'rb') as f:
            models['scaler'] = pickle.load(f)
        
        # T·∫£i th√¥ng tin m√¥ h√¨nh
        with open(os.path.join(models_dir, "model_info.pkl"), 'rb') as f:
            models['info'] = pickle.load(f)
        
        # Kh·ªüi t·∫°o classifier ƒë·ªÉ tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng
        classifier = VietnameseGenderClassifier()
        
        print("‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng c√°c m√¥ h√¨nh!")
        print(f"üìä Th√¥ng tin m√¥ h√¨nh:")
        print(f"   - SVM Accuracy: {models['info']['svm_accuracy']:.4f}")
        print(f"   - Random Forest Accuracy: {models['info']['rf_accuracy']:.4f}")
        print(f"   - T·ªïng s·ªë m·∫´u: {models['info']['total_samples']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫£i m√¥ h√¨nh: {e}")
        return False

def predict_gender_from_audio(audio_path: str) -> Dict[str, Any]:
    """D·ª± ƒëo√°n gi·ªõi t√≠nh t·ª´ file √¢m thanh"""
    try:
        # Tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng
        features = classifier.extract_features(audio_path)
        
        if features is None:
            return {
                "success": False,
                "error": "Kh√¥ng th·ªÉ tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng t·ª´ file √¢m thanh"
            }
        
        # Chu·∫©n h√≥a ƒë·∫∑c tr∆∞ng
        features_scaled = models['scaler'].transform(features.reshape(1, -1))
        
        # D·ª± ƒëo√°n v·ªõi c·∫£ hai m√¥ h√¨nh
        results = {}
        
        # SVM prediction
        svm_pred = models['svm'].predict(features_scaled)[0]
        svm_confidence = abs(models['svm'].decision_function(features_scaled)[0])
        svm_confidence = min(svm_confidence / 2.0, 1.0)
        
        results['SVM'] = {
            'prediction': 'N·ªØ' if svm_pred == 1 else 'Nam',
            'confidence': float(svm_confidence),
            'gender_code': int(svm_pred)
        }
        
        # Random Forest prediction
        rf_pred = models['rf'].predict(features_scaled)[0]
        rf_prob = models['rf'].predict_proba(features_scaled)[0]
        rf_confidence = max(rf_prob)
        
        results['RandomForest'] = {
            'prediction': 'N·ªØ' if rf_pred == 1 else 'Nam',
            'confidence': float(rf_confidence),
            'gender_code': int(rf_pred)
        }
        
        # K·∫øt qu·∫£ t·ªïng h·ª£p
        final_prediction = 'N·ªØ' if svm_pred == 1 else 'Nam'
        final_confidence = max(svm_confidence, rf_confidence)
        
        return {
            "success": True,
            "predictions": results,
            "final_prediction": final_prediction,
            "final_confidence": float(final_confidence),
            "features": {
                "mfcc": features[:13].tolist(),
                "f0": float(features[13]),
                "feature_vector": features.tolist()
            },
            "model_info": {
                "svm_accuracy": models['info']['svm_accuracy'],
                "rf_accuracy": models['info']['rf_accuracy'],
                "total_samples": models['info']['total_samples']
            }
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": f"L·ªói khi d·ª± ƒëo√°n: {str(e)}"
        }

@app.on_event("startup")
async def startup_event():
    """Kh·ªüi t·∫°o khi API start"""
    print("üöÄ Kh·ªüi ƒë·ªông API ph√¢n lo·∫°i gi·ªõi t√≠nh...")
    if not load_models():
        print("‚ùå Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh. API s·∫Ω kh√¥ng ho·∫°t ƒë·ªông.")
    else:
        print("‚úÖ API s·∫µn s√†ng nh·∫≠n requests!")

@app.get("/")
async def root():
    """Root endpoint"""
    return {
        "message": "Vietnamese Gender Classification API",
        "version": "1.0.0",
        "status": "running",
        "endpoints": {
            "/": "API info",
            "/predict": "Upload audio file for gender classification",
            "/health": "Health check",
            "/model-info": "Model information"
        }
    }

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "models_loaded": len(models) > 0,
        "available_models": list(models.keys()) if models else []
    }

@app.get("/model-info")
async def model_info():
    """Th√¥ng tin m√¥ h√¨nh"""
    if not models:
        raise HTTPException(status_code=500, detail="Models not loaded")
    
    return {
        "model_info": models.get('info', {}),
        "available_models": ["SVM", "RandomForest"],
        "features": models.get('info', {}).get('feature_names', [])
    }

@app.post("/predict", response_model=PredictionResponse)
async def predict_gender(file: UploadFile = File(...)):
    """
    D·ª± ƒëo√°n gi·ªõi t√≠nh t·ª´ file √¢m thanh
    
    - **file**: File √¢m thanh (WAV, MP3, etc.)
    """
    # Ki·ªÉm tra m√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c t·∫£i ch∆∞a
    if not models:
        raise HTTPException(status_code=500, detail="Models not loaded")
    
    # Ki·ªÉm tra file
    if not file.filename:
        raise HTTPException(status_code=400, detail="No file uploaded")
    
    # Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
    allowed_extensions = ['.wav', '.mp3', '.flac', '.m4a', '.ogg']
    file_ext = os.path.splitext(file.filename)[1].lower()
    
    if file_ext not in allowed_extensions:
        raise HTTPException(
            status_code=400, 
            detail=f"Unsupported file format. Allowed: {allowed_extensions}"
        )
    
    try:
        # L∆∞u file t·∫°m th·ªùi
        temp_file_path = f"temp_{file.filename}"
        
        with open(temp_file_path, "wb") as buffer:
            content = await file.read()
            buffer.write(content)
        
        # D·ª± ƒëo√°n
        result = predict_gender_from_audio(temp_file_path)
        
        # X√≥a file t·∫°m
        if os.path.exists(temp_file_path):
            os.remove(temp_file_path)
        
        if result["success"]:
            return PredictionResponse(
                success=True,
                prediction=result
            )
        else:
            return PredictionResponse(
                success=False,
                error=result["error"]
            )
            
    except Exception as e:
        # X√≥a file t·∫°m n·∫øu c√≥ l·ªói
        temp_file_path = f"temp_{file.filename}"
        if os.path.exists(temp_file_path):
            os.remove(temp_file_path)
        
        raise HTTPException(status_code=500, detail=f"Error processing file: {str(e)}")

@app.post("/predict-url")
async def predict_gender_from_url(audio_url: str):
    """
    D·ª± ƒëo√°n gi·ªõi t√≠nh t·ª´ URL file √¢m thanh
    
    - **audio_url**: URL c·ªßa file √¢m thanh
    """
    if not models:
        raise HTTPException(status_code=500, detail="Models not loaded")
    
    try:
        # T·∫£i file t·ª´ URL (c·∫ßn th√™m th∆∞ vi·ªán requests)
        import requests
        
        response = requests.get(audio_url)
        response.raise_for_status()
        
        # L∆∞u file t·∫°m
        temp_file_path = "temp_audio.wav"
        with open(temp_file_path, "wb") as f:
            f.write(response.content)
        
        # D·ª± ƒëo√°n
        result = predict_gender_from_audio(temp_file_path)
        
        # X√≥a file t·∫°m
        if os.path.exists(temp_file_path):
            os.remove(temp_file_path)
        
        return result
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error processing URL: {str(e)}")

if __name__ == "__main__":
    # Ch·∫°y API server
    uvicorn.run(
        "api:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    ) 